swagger: "2.0"
info:
  version: "0.0.2"
  title: BackEnd
# during dev, should point to your local machine
host: localhost:10010
tags:
  - name: Security
    description: login and permissions, email verify, auth
  - name: User
    description: account management
# basePath prefixes all resource paths
basePath: /api
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /user/getUsers:
    x-swagger-router-controller: UserController
    get:
      description: get all 'user' object
      operationId: getUsers
      tags:
        - User
      responses:
        "200":
          description: get an array of 'user' object
          schema:
            title: UsersArray
            type: array
            items:
              $ref: "#/definitions/User"
  /user/{userId}/getUserById:
    x-swagger-router-controller: UserController
    get:
      description: get an 'user' object
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: a id of an user
          required: true
          type: string
      responses:
        "200":
          description: get a 'user' object
          schema:
            $ref: "#/definitions/User"
  /user/{username}/getUserByUsername:
    x-swagger-router-controller: UserController
    get:
      description: get an 'user' object
      operationId: getUserByUsername
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: username of an user
          required: true
          type: string
      responses:
        "200":
          description: get a 'user' object
          schema:
            $ref: "#/definitions/User"
  /user/{userId}/deleteUser:
    x-swagger-router-controller: UserController
    put:
      description: deactivate an 'user' object
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: a id of an user
          required: true
          type: string
      responses:
        "200":
          description: get a 'user' object
          schema:
            $ref: "#/definitions/User"
  /user/{userId}/updatePassword:
    x-swagger-router-controller: UserController
    put:
      description: update an 'user' password
      operationId: updatePassword
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: a id of an user
          required: true
          type: string
        - name: changePwdObject
          in: body
          description: an object to change pwd
          required: true
          schema:
            $ref: "#/definitions/ChangePasswordObject"
      responses:
        "200":
          description: get a 'user' object
          schema:
            $ref: "#/definitions/User"
  /user/{userId}/updateUser:
    x-swagger-router-controller: UserController
    put:
      description: update an 'user' password
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: a id of an user
          required: true
          type: string
        - name: userToUpdate
          in: body
          description: an 'user' object to change
          required: true
          schema:
            $ref: "#/definitions/UpdateUserObject"
      responses:
        "200":
          description: get a 'user' object
          schema:
            $ref: "#/definitions/User"
  /user/register:
    # binds a127 app logic to a route
    x-swagger-router-controller: UserController
    post:
      description: add a 'user' object to data
      # used as the method name of the controller
      operationId: register
      tags:
        - User
      parameters:
        - name: userToAdd
          in: body
          description: a 'user' object
          required: true
          schema:
            $ref: "#/definitions/RegisterUserObject"
      responses:
        "204":
          description: User successfully created
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RegisterUserResponse"
        # responses may fall through to errors
        "400":
          description: Bad Request Error
          schema:
            $ref: "#/definitions/BadRequestError"
        "404":
          description: Not Found Error
          schema:
            $ref: "#/definitions/NotFoundError"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth:
    x-swagger-router-controller: AuthController
    post:
      description: Authenticate a user based on his username and password
      operationId: auth
      tags:
        - Security
      parameters:
        - name: authObject
          in: body
          description: an 'auth' object
          required: true
          schema:
            $ref: "#/definitions/AuthObject"
      responses:
        "200":
          description: User successfully logged in
          schema:
            # a pointer to a definition
            $ref: "#/definitions/SuccessResponse"
        # responses may fall through to errors
        "400":
          description: Bad Request Error
          schema:
            $ref: "#/definitions/BadRequestError"
        "404":
          description: Not Found Error
          schema:
            $ref: "#/definitions/NotFoundError"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  User:
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      birthDate:
        type: string
        format: date
  RegisterUserObject:
    required:
      - username
      - password
      - passwordConfirmation
      - email
      - firstname
      - lastname
      - birthDate
    properties:
      username:
        type: string
      password:
        type: string
      passwordConfirmation:
        type: string
      email:
        type: string
        format: email
      firstname:
        type: string
      lastname:
        type: string
      birthDate:
        type: string
        format: date
  UpdateUserObject:
    required:
      - username
      - email
      - firstname
      - lastname
      - birthDate
    properties:
      username:
        type: string
      birthDate:
        type: string
        format: date
      email:
        type: string
        format: email
      firstname:
        type: string
      lastname:
        type: string
  AuthObject:
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  ChangePasswordObject:
    required:
      - oldPassword
      - newPassword
      - confirmNewPassword
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
      confirmNewPassword:
        type: string
  SuccessResponse:
    required:
      - message
    properties:
      message:
        type: string
  RegisterUserResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  BadRequestError:
    required:
      - message
    properties:
      message:
        type: string
  NotFoundError:
    required:
      - message
    properties:
      message:
        type: string